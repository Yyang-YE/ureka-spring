name: CI-Build check

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: read
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # repository checkout
    - name: Checkout
      uses: actions/checkout@v4

    # JDK 환경 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto' # AWS 최적화 배포판

    - name: application.properties 파일 설정
      run: |
        mkdir -p src/main/resources # 디렉토리 생성(이미 존재해도 괜찮음)
        echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties
    
    # Gradle 환경 설치
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

#    # Gradle 캐싱
#    - name: Gradle Caching
#      uses: actions/cache@v3
#      with:
#        path: |
#          ~/.gradle/caches
#          ~/.gradle/wrapper
#        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#        restore-keys: |
#          ${{ runner.os }}-gradle-
  
    # Gradle 권한 변경
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    # Build 진행
    - name: Build with Gradle
#      env:
#        SPRING_PROFILES_ACTIVE: test  # Spring Boot의 활성 프로파일을 "test"로 설정
      run: ./gradlew clean build --stacktrace  # Gradle을 실행하여 빌드 수행
      shell: bash  # Bash 셸에서 실행

    - name: 빌드된 JAR 파일 확인
      run: ls -l build/libs

    - name: Docker 빌드 전 프로젝트 구조 확인
      run: ls -R


      #    - name: 빌드된 파일 이름 변경하기
#      run: mv ./build/libs/*SNAPSHOT.jar ./cicdtest.jar

      # docker build & push to production
    - name: Docker build & push
      if: contains(github.ref, 'main')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test -f ./Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/docker-test:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
  
    steps:
#    # Dockerfile 위치 확인
#    - name: Check if Dockerfile exists
#      run: ls -l
#    - name: Check Dockerfile location
#      run: find . -name "Dockerfile"

    # deploy to production
    - name: Deploy
      if: contains(github.ref, 'main')
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }} # EC2 퍼블릭 IPv4 DNS
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          # sudo docker ps
          docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
          chmod 777 ./deploy.sh
          ./deploy.sh
          # sudo docker run -d -p 8080:8082 ${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}
          sudo docker image prune -f
